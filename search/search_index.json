{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arista Campus Networking Demo","text":"<p>Welcome to the Arista AVD Campus Deployment &amp; Operations Demo documentation site. This demo showcases a modern campus network architecture using Arista Validated Designs (AVD), Ansible, CloudVision as a Service (CVaaS), and GitHub Actions for full automation.</p>"},{"location":"#quick-links","title":"\ud83d\ude80 Quick Links","text":"<ul> <li>Topology Overview</li> <li>Automation Workflow</li> <li>AVD Environment Setup</li> <li>References</li> </ul>"},{"location":"references/","title":"References and Links","text":"<p>This demo repository was created for the Arista Campus Networking Event to showcase modern automation practices using Arista Validated Designs (AVD).</p> <p>Below are link references to more documentation</p> <ul> <li>Arista AVD Documentation</li> <li>CloudVision as a Service</li> <li>Ansible EOS Collection</li> <li>MermaidJS Diagrams</li> </ul>"},{"location":"setup/","title":"AVD Environment Setup","text":"<p>Ensure your environment meets the following requirements:</p> <ul> <li>Python 3.12+</li> <li>Ansible 2.14+</li> <li>Arista AVD Collection 5.4+</li> <li>CloudVision as a Service (CVaaS) subscription</li> <li>Virtual Environment (venv) for Python dependency isolation</li> </ul>"},{"location":"setup/#clone-git-respository","title":"Clone Git Respository","text":"<p>Clone the repository into a local working directory:</p> <pre><code>git clone git@github.com:arista-ce-southwest/avd-campus-networking-event-demo.git\ncd avd-gns3-ztp-cvaas-demo\n</code></pre>"},{"location":"setup/#setup-python-virtual-environment","title":"Setup Python Virtual Environment","text":"<p>Activate the virtual environment included in the repository:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Validate that required packages are installed:</p> <pre><code>pip install --upgrade pip\npip install -r requirements.txt\nansible --version\n</code></pre>"},{"location":"setup/#inventory-validation-and-service-account-creation-in-cvp","title":"Inventory Validation and Service Account Creation in CVP","text":"<p>AVD uses an Ansible inventory to define devices, VRFs, VLANs, and SVIs for the demo network.</p> <ol> <li>Validate the inventory structure:</li> </ol> <pre><code>ansible-inventory -i inventory.yml --graph\nansible-inventory -i inventory.yml --list\n</code></pre> <ol> <li>Create a service account in CloudVision (CVaaS):</li> </ol> <p>Steps to create service accounts on CloudVision - AVD==5.4</p>"},{"location":"topology/","title":"Topology Overview","text":"<p>The demo topology includes:</p> <ul> <li>L2 Leaf: SC-B1-IDF1 (inband management VLAN 10, DHCP server endpoint)</li> <li>L3 Spine/Core: SC-B1-Core1 / SC-B1-Core2 (DHCP relay, BGP peering, SVI routing)</li> <li>Access Devices: APs and PCs connected via VLANs 10, 11, and 12</li> </ul> <pre><code>graph TD\n    %% Automation Layer\n    subgraph \"Automation and Control Plane\"\n        AVD[AVD Framework - Ansible and GitHub Actions]\n        CVaaS[Arista CloudVision as a Service]\n    end\n\n    %% Core Layer\n    subgraph \"Core or Spine Layer\"\n        Core1[SC-B1-Core1 - L3 Spine, DHCP Relay, BGP, VRF Routing]\n        Core2[SC-B1-Core2 - L3 Spine, DHCP Relay, BGP, VRF Routing]\n    end\n\n    %% Leaf Layer\n    subgraph \"Access or Leaf Layer\"\n        Leaf[SC-B1-IDF1 - L2 Leaf, DHCP Server, VLAN Termination]\n    end\n\n    %% Endpoint Layer\n    subgraph \"Access Devices\"\n        APs[Access Points - VLANs 10 and 11]\n        PCs[PC Clients - VLAN 12]\n    end\n\n    %% Topology Connections\n    AVD --&gt;|Render and Deploy Config| CVaaS\n    CVaaS --&gt;|Push Configuration| Core1\n    Core1 ---|Uplink| Leaf\n    Core2 ---|Uplink| Leaf\n    Leaf ---|VLAN 10| APs\n    Leaf ---|VLAN 11| APs\n    Leaf ---|VLAN 12| PCs\n\n    %% DHCP Workflow\n    subgraph \"Management and DHCP Flow\"\n        PCs --&gt;|DHCP Request| Leaf\n        Core1 --&gt;|DHCP Relay| Leaf\n        Core2 --&gt;|DHCP Relay| Leaf\n    end</code></pre> <p>Key Highlights:</p> <ul> <li>AVD serves as the automation source for configuration generation.</li> <li>CVaaS is the central deployment and orchestration platform.</li> <li>Core switches provide L3 services and DHCP relay.</li> <li>Access devices (APs and PCs) connect through VLANs defined in the demo fabric</li> </ul>"},{"location":"workflow/","title":"Automation Workflow","text":"<p>This workflow demonstrates how AVD integrates with GitHub Actions and CVaaS for automated configuration deployment.</p> <pre><code>sequenceDiagram\n  participant User\n  participant AVD\n  participant GH as GitHub\n  participant CVaaS\n  participant Device\n\n  par Offline Configuration Prep\n    User-&gt;&gt;AVD: Render configuration using AVD framework\n  end\n  par Automation Workflow\n    AVD-&gt;&gt;GH: Commit render output\n    GH-&gt;&gt;AVD: Trigger build.yml\n    AVD-&gt;&gt;+CVaaS: Execute deploy-studio.yml\n    CVaaS-&gt;&gt;Device: Push configuration to device\n    Device--&gt;&gt;CVaaS: Acknowledge deployment\n    CVaaS--&gt;&gt;AVD: Deployment status\n  end</code></pre>"}]}